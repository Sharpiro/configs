##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# https://www.nginx.com/resources/wiki/start/
# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
# https://wiki.debian.org/Nginx/DirectoryStructure
#
# In most cases, administrators will remove this file from sites-enabled/ and
# leave it as reference inside of sites-available where it will continue to be
# updated by the nginx packaging team.
#
# This file will automatically load configuration files provided by other
# applications, such as Drupal or Wordpress. These applications will be made
# available underneath a path with that package name, such as /drupal8.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# default server, if no host, return not found
server {
    access_log /var/log/nginx/access.log origin_log;
    if ($host = droplet.sharpiro.net) {
        return 301 https://$host$request_uri;
    } # managed by Certbot

    if ($host = health.sharpiro.net) {
        return 301 https://$host$request_uri;
    } # managed by Certbot

    listen      80;
    listen [::]:80 ;
	
	# below doesn't work for some reason, but works further below...
    #listen [::]:443 ssl ipv6only=on; # managed by Certbot
	
    listen [::]:443;
    listen 443 ssl; # managed by Certbot
    server_name "";
    return      404;

	# self-signed certs for no virtual server
    ssl_certificate /root/certs/test-public-key.pem;
    ssl_certificate_key /root/certs/test-private-key.pem;
}

# Virtual Host configuration for health.sharpiro.net
#
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.
#
server {
	access_log /var/log/nginx/access.log origin_log;

	server_name health.sharpiro.net;

	root /var/www/health.sharpiro.net;
	index index.html;

	location / {
		try_files $uri $uri/ =404;
	}
	
	# seems a complex way to do /test(/)*
	location ~ (?>\/test$)|(?>\/test\/.*) {
		proxy_pass http://localhost:8080;
	}

	location = /healthExportSmart {
		proxy_pass http://localhost:8080;
	}

	location = /healthexport {
		proxy_pass http://localhost:8080;
	}


    listen [::]:443 ssl ipv6only=on; # managed by Certbot
    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/health.sharpiro.net/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/health.sharpiro.net/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
}

server {
	listen 443 ssl ;
	listen [::]:443 ssl ;

	access_log /var/log/nginx/access.log origin_log;
	#
	# Note: You should disable gzip for SSL traffic.
	# See: https://bugs.debian.org/773332
	#
	# Read up on ssl_ciphers to ensure a secure configuration.
	# See: https://bugs.debian.org/765782
	#
	root /var/www/html;

	# Add index.php to the list if you are using PHP
	index index.html index.htm index.nginx-debian.html;
	server_name droplet.sharpiro.net; # managed by Certbot


	#location /health {
	#	rewrite ^/health(.*)$ $1 break;
	#	proxy_pass http://localhost:8080;
	#}

	location / {
		try_files $uri $uri/ =404;
	}

	# pass PHP scripts to FastCGI server
	#
	#location ~ \.php$ {
	#	include snippets/fastcgi-php.conf;
	#
	#	# With php-fpm (or other unix sockets):
	#	fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;
	#	# With php-cgi (or other tcp sockets):
	#	fastcgi_pass 127.0.0.1:9000;
	#}

	# deny access to .htaccess files, if Apache's document root
	# concurs with nginx's one
	#
	#location ~ /\.ht {
	#	deny all;
	#}


    ssl_certificate /etc/letsencrypt/live/droplet.sharpiro.net/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/droplet.sharpiro.net/privkey.pem; # managed by Certbot
}
#server {
#    if ($host = droplet.sharpiro.net) {
#        return 301 https://$host$request_uri;
#    } # managed by Certbot
#
#	
#	listen 80 ;
#	listen [::]:80 ;
#	access_log /var/log/nginx/access.log origin_log;
#    server_name droplet.sharpiro.net;
#    return 404; # managed by Certbot
#}
#
#server {
#    if ($host = health.sharpiro.net) {
#        return 301 https://$host$request_uri;
#    } # managed by Certbot
#
#
#	listen 80;
#	listen [::]:80;
#	access_log /var/log/nginx/access.log origin_log;
#
#	server_name health.sharpiro.net;
#    return 404; # managed by Certbot
#}
